from aiogram import Bot, Dispatcher, types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command
from datetime import datetime, timedelta
import os
import asyncio
import logging

# –ü–æ–ª—É—á–∞–µ–º chat_id –∏ —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
CHAT_ID = os.getenv("CHAT_ID", "625265901")  # –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à chat_id, –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

# –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ç–æ–∫–µ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite, –Ω–æ –≤ –ø–∞–º—è—Ç–∏ (–Ω–µ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
conn = sqlite3.connect(":memory:")
cursor = conn.cursor()

# –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø–∞–º—è—Ç–∏
cursor.execute("""
    CREATE TABLE IF NOT EXISTS birthdays (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        name TEXT,
        date TEXT
    )
""")
cursor.execute("""
    CREATE TABLE IF NOT EXISTS reminders (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        days_before INTEGER DEFAULT 1
    )
""")
conn.commit()

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –∑–∞–¥–∞–Ω–æ
cursor.execute("SELECT COUNT(*) FROM reminders")
if cursor.fetchone()[0] == 0:
    cursor.execute("INSERT INTO reminders (days_before) VALUES (1)")
    conn.commit()

# –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏
menu_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üìÖ –î–æ–±–∞–≤–∏—Ç—å –î–†"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ –î–†")],
    [KeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –î–†"), KeyboardButton(text="üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")],
], resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤ –º–µ–Ω—é:", reply_markup=menu_keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /menu ‚Äì –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –≤—ã–∑–æ–≤—ã –º–µ–Ω—é
@dp.message(Command("menu"))
async def show_menu(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=menu_keyboard)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(lambda message: message.text == "üìÖ –î–æ–±–∞–≤–∏—Ç—å –î–†")
async def add_birthday_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –î–† –≤ —Ñ–æ—Ä–º–∞—Ç–µ: **–ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì**")

@dp.message(lambda message: len(message.text.split()) == 2 and "." in message.text)
async def add_birthday(message: types.Message):
    try:
        name, date_str = message.text.split(maxsplit=1)
        datetime.strptime(date_str, "%d.%m.%Y")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
        cursor.execute("INSERT INTO birthdays (name, date) VALUES (?, ?)", (name, date_str))
        conn.commit()
        await message.answer(f"‚úÖ –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} ({date_str}) –¥–æ–±–∞–≤–ª–µ–Ω!")
    except ValueError:
        await message.answer("‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ **–ò–º—è –î–î.–ú–ú.–ì–ì–ì–ì**")

# –°–ø–∏—Å–æ–∫ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π
@dp.message(lambda message: message.text == "üìã –°–ø–∏—Å–æ–∫ –î–†")
async def list_birthdays(message: types.Message):
    cursor.execute("SELECT name, date FROM birthdays")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("üì≠ –°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
        return
    text = "üéÇ –î–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è:\n" + "\n".join([f"{name} ‚Äì {date}" for name, date in rows])
    await message.answer(text)

# –£–¥–∞–ª–µ–Ω–∏–µ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è
@dp.message(lambda message: message.text == "‚ùå –£–¥–∞–ª–∏—Ç—å –î–†")
async def delete_birthday_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–º—è, —á–µ–π –î–† —É–¥–∞–ª–∏—Ç—å:")

@dp.message(lambda message: len(message.text.split()) == 1)
async def delete_birthday(message: types.Message):
    name = message.text
    cursor.execute("DELETE FROM birthdays WHERE name = ?", (name,))
    conn.commit()
    await message.answer(f"üóë –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è {name} —É–¥–∞–ª–µ–Ω.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
@dp.message(lambda message: message.text == "üîî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
async def set_reminder_prompt(message: types.Message):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ, –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –¥–æ –î–† –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä: **3**):")

@dp.message(lambda message: message.text.isdigit())
async def set_reminder_days(message: types.Message):
    days = int(message.text)
    cursor.execute("UPDATE reminders SET days_before = ?", (days,))
    conn.commit()
    await message.answer(f"üîî –¢–µ–ø–µ—Ä—å —è –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∑–∞ {days} –¥–Ω–µ–π –¥–æ –¥–Ω—è —Ä–æ–∂–¥–µ–Ω–∏—è!")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–Ω–µ–π —Ä–æ–∂–¥–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
async def check_birthdays():
    while True:
        cursor.execute("SELECT days_before FROM reminders")
        days_before = cursor.fetchone()[0]

        today = datetime.today()
        notify_date = today + timedelta(days=days_before)

        cursor.execute("SELECT name, date FROM birthdays")
        rows = cursor.fetchall()

        for name, date in rows:
            bday = datetime.strptime(date, "%d.%m.%Y").replace(year=today.year)
            if bday.date() == notify_date.date():
                await bot.send_message(CHAT_ID, f"üéâ –ß–µ—Ä–µ–∑ {days_before} –¥–Ω–µ–π –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —É {name}!")

        await asyncio.sleep(86400)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def on_start(dp):
    logging.basicConfig(level=logging.INFO)
    await dp.start_polling()

if __name__ == '__main__':
    asyncio.create_task(check_birthdays())  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
    asyncio.run(on_start(dp))
